package br.com.carro.services;

import br.com.carro.entities.Pasta;
import br.com.carro.entities.Role.Role;
import br.com.carro.entities.Usuario.Usuario;
import br.com.carro.entities.DTO.UsuarioLogadoDTO;
import br.com.carro.exceptions.ResourceNotFoundException;
import br.com.carro.repositories.RoleRepository;
import br.com.carro.repositories.UsuarioRepository;
import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.nio.file.AccessDeniedException;
import java.time.LocalDateTime;
import java.util.HashSet;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class UsuarioService {

    @Autowired
    private UsuarioRepository usuarioRepository;
    @Autowired
    private final RoleRepository roleRepository;
    @Autowired
    private final PasswordEncoder passwordEncoder;

    public UsuarioService(UsuarioRepository usuarioRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.usuarioRepository = usuarioRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // ‚úÖ M√©todo de cadastro com roles
    @Transactional(noRollbackFor = EntityExistsException.class) // üëà Evita rollback autom√°tico
    public Usuario cadastrar(Usuario usuario, Set<Long> roleIds,Usuario usuarioLogado) throws  AccessDeniedException {
        // Apenas admins podem excluir
        if (!usuarioLogado.getRoles().stream().anyMatch(r -> r.getNome().equals("ADMIN"))) {
            throw new AccessDeniedException("Usu√°rio n√£o possui permiss√£o para excluir outro usu√°rio.");
        }
        // Verifica se j√° existe um usu√°rio com o mesmo username
        if (usuarioRepository.existsByUsername(usuario.getUsername())) {
            throw new EntityExistsException("Usu√°rio com este username j√° existe.");
        }

        // Busca as roles pelos IDs
        Set<Role> roles = new HashSet<>();
        if (roleIds != null && !roleIds.isEmpty()) {
            roles = roleRepository.findAllById(roleIds)
                    .stream()
                    .collect(Collectors.toSet());
            if (roles.size() != roleIds.size()) {
                throw new EntityNotFoundException("Uma ou mais roles informadas n√£o existem.");
            }
        }

        usuario.setNome(usuario.getNome());
        usuario.setRoles(roles);

        try {
            return usuarioRepository.save(usuario);
        } catch (DataIntegrityViolationException e) {
            // Captura erro de banco e converte para exce√ß√£o mais amig√°vel
            throw new EntityExistsException("Usu√°rio com este username j√° existe.");
        }
    }

    // Buscar usuario por ID
    @Transactional(rollbackFor = Exception.class, noRollbackFor = {ResourceNotFoundException.class})
    public Usuario buscarPorId(Long id, Usuario usuarioLogado) throws AccessDeniedException {
        // Apenas admins podem consultar diretamente outro usu√°rio
        if (!usuarioLogado.getRoles().stream().anyMatch(r -> r.getNome().equals("ADMIN"))) {
            throw new AccessDeniedException("Usu√°rio n√£o possui permiss√£o para consultar outro usu√°rio.");
        }

        // Evita que o usu√°rio busque a si mesmo de forma redundante (opcional, mas consistente com excluir)
        if (id.equals(usuarioLogado.getId())) {
            throw new IllegalArgumentException("Para consultar seus pr√≥prios dados, utilize o endpoint de usu√°rio logado.");
        }

        // Busca o usu√°rio no banco
        return usuarioRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Usu√°rio n√£o encontrado com id " + id));
    }


    @Transactional(
            rollbackFor = Exception.class,
            noRollbackFor = {ResourceNotFoundException.class, IllegalArgumentException.class}
    )
    public Usuario atualizar(Long id, Usuario usuarioComNovosDados, Usuario usuarioLogado) throws AccessDeniedException {
        // ‚úÖ Apenas admins podem atualizar usu√°rios
        if (!usuarioLogado.getRoles().stream().anyMatch(r -> r.getNome().equals("ADMIN"))) {
            throw new AccessDeniedException("Usu√°rio n√£o possui permiss√£o para atualizar outros usu√°rios.");
        }

        // ‚úÖ N√£o permitir que o usu√°rio remova suas pr√≥prias permiss√µes cr√≠ticas
        if (id.equals(usuarioLogado.getId()) && usuarioComNovosDados.getRoles() != null) {
            boolean removeuAdmin = usuarioComNovosDados.getRoles().stream()
                    .noneMatch(role -> "ADMIN".equals(role.getNome()));
            if (removeuAdmin) {
                throw new IllegalArgumentException("Usu√°rio n√£o pode remover seu pr√≥prio papel de ADMIN.");
            }
        }

        // ‚úÖ Buscar usu√°rio no banco
        Usuario usuarioExistente = usuarioRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Usu√°rio n√£o encontrado com id " + id));

        // Atualizar username e nome
        usuarioExistente.setUsername(usuarioComNovosDados.getUsername());
        usuarioExistente.setNome(usuarioComNovosDados.getNome());

        // ‚úÖ Atualizar roles
        if (usuarioComNovosDados.getRoles() != null) {
            Set<Long> roleIds = usuarioComNovosDados.getRoles().stream()
                    .map(Role::getId)
                    .collect(Collectors.toSet());

            Set<Role> rolesDoBanco = new HashSet<>(roleRepository.findAllById(roleIds));
            if (rolesDoBanco.isEmpty()) {
                throw new IllegalArgumentException("Nenhuma role v√°lida encontrada para atualizar o usu√°rio.");
            }
            usuarioExistente.setRoles(rolesDoBanco);
        }

        // ‚úÖ Atualizar senha apenas se for fornecida
        if (usuarioComNovosDados.getPassword() != null && !usuarioComNovosDados.getPassword().isBlank()) {
            usuarioExistente.setPassword(usuarioComNovosDados.getPassword()); // j√° deve estar encodada
        }

        return usuarioRepository.save(usuarioExistente);
    }



    @Transactional(rollbackFor = Exception.class, noRollbackFor = {ResourceNotFoundException.class})
    public void excluir(Long id, Usuario usuarioLogado) throws AccessDeniedException {
        // Apenas admins podem excluir
        if (!usuarioLogado.getRoles().stream().anyMatch(r -> r.getNome().equals("ADMIN"))) {
            throw new AccessDeniedException("Usu√°rio n√£o possui permiss√£o para excluir outro usu√°rio.");
        }

        // Evita autoexclus√£o
        if (id.equals(usuarioLogado.getId())) {
            throw new IllegalArgumentException("Usu√°rio n√£o pode se auto-excluir.");
        }

        Usuario usuario = usuarioRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Usu√°rio n√£o encontrado com id " + id));

        // Exclui usu√°rio
        usuario.getRoles().clear();

        usuarioRepository.delete(usuario);
    }


    @Transactional(readOnly = true, rollbackFor = Exception.class, noRollbackFor = {ResourceNotFoundException.class})
    public UsuarioLogadoDTO buscarUsuarioLogado() throws AccessDeniedException {
        // 1Ô∏è‚É£ Recupera o usu√°rio logado do contexto de seguran√ßa
        String login = SecurityContextHolder.getContext().getAuthentication().getName();

        // 2Ô∏è‚É£ Busca usu√°rio no banco
        Usuario usuario = usuarioRepository.findByUsername(login)
                .orElseThrow(() -> new ResourceNotFoundException("Usu√°rio autenticado n√£o encontrado."));

        // 3Ô∏è‚É£ Mapeia pastas acessadas
        Set<Long> pastasIds = usuario.getPastasPrincipaisAcessadas().stream()
                .map(Pasta::getId)
                .collect(Collectors.toSet());

        // 4Ô∏è‚É£ Mapeia roles para DTO
        Set<UsuarioLogadoDTO.RoleDto> rolesDto = usuario.getRoles().stream()
                .map(role -> new UsuarioLogadoDTO.RoleDto(role.getId(), role.getNome()))
                .collect(Collectors.toSet());

        // 5Ô∏è‚É£ Retorna DTO consolidado
        return new UsuarioLogadoDTO(
                usuario.getId(),
                usuario.getUsername(),
                usuario.getNome(),
                pastasIds,
                rolesDto
        );
    }


    // Listar todas as marcas com pagina√ß√£o
    public Page<Usuario> listar(Pageable pageable) {
        return usuarioRepository.findAll(pageable);
    }

    // Listar registros filtrando por NOME (com pagina√ß√£o)
    public Page<Usuario> buscarPorNome(String nome, Pageable pageable) {
        return usuarioRepository.findByNomeContainingIgnoreCase(nome,pageable);
    }

    // Listar registros filtrando por USERNAME (com pagina√ß√£o)
    public Page<Usuario> buscarPorLogin(String username, Pageable pageable) {
        return usuarioRepository.findByUsernameContainingIgnoreCase(username,pageable);
    }

}
